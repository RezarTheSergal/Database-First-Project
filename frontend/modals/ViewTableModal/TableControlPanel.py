from collections import defaultdict
from typing import List, Dict, Any
from PySide6.QtWidgets import QWidget, QScrollArea
from PySide6.QtCore import Signal, Qt
from backend.repository import DatabaseRepository
from backend.utils.responce_types import ResponseStatus
from frontend.shared.ui import PushButton, Widget, VLayout, HLayout
from frontend.shared.ui.FilterBlock import FilterBlockClass
import logging

logger = logging.getLogger()
database = DatabaseRepository()

class TableControlPanel(QWidget):
    """–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤"""
    
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    filters_changed = Signal(dict)  # {table_name: {col: value, ...}, ...}
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.blocks: List[FilterBlockClass] = []
        self.table_names = []
        
        self._setup_ui()
        self._load_table_names()
        self._add_initial_filter_block()
    
    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        main_layout = VLayout()
        self.setLayout(main_layout)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_layout = HLayout()
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.add_button = PushButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", 
            callback=self._add_filter_block
        )
        self.clear_button = PushButton(
            text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ",
            callback=self._clear_all_filters
        )
        self.apply_button = PushButton(
            text="‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã",
            callback=self._apply_filters
        )
        
        title_layout.addWidget(self.add_button)
        title_layout.addWidget(self.clear_button)
        title_layout.addWidget(self.apply_button)
        title_layout.addStretch()
        
        main_layout.addLayout(title_layout)
        
        # –°–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –±–ª–æ–∫–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)
        scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)
        
        self.blocks_container = Widget(VLayout())
        scroll_area.setWidget(self.blocks_container)
        
        main_layout.addWidget(scroll_area)
    
    def _load_table_names(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω —Ç–∞–±–ª–∏—Ü –∏–∑ –ë–î"""
        try:
            response = database.get_tablenames()
            if response.status == ResponseStatus.SUCCESS and response.data:
                self.table_names = response.data
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.table_names)} —Ç–∞–±–ª–∏—Ü")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü: {response.error}")
                self.table_names = []
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞–±–ª–∏—Ü: {e}")
            self.table_names = []
    
    def _add_initial_filter_block(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –±–ª–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        if self.table_names:
            self._add_filter_block()
    
    def _add_filter_block(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –±–ª–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        try:
            block = FilterBlockClass(initial_tables=self.table_names)
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –±–ª–æ–∫–∞ —Å –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è
            block_container = Widget(HLayout())
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫
            block_container.layout().addWidget(block)
            
            # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–ª–æ–∫–æ–≤ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ)
            if len(self.blocks) > 0:  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π –±–ª–æ–∫
                remove_button = PushButton(
                    text="‚ùå",
                    callback=lambda: self._remove_filter_block(block, block_container)
                )
                remove_button.setMaximumWidth(30)
                block_container.layout().addWidget(remove_button)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∏ –≤ UI
            self.blocks.append(block)
            self.blocks_container.layout().addWidget(block_container)
            
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –±–ª–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ #{len(self.blocks)}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
    
    def _remove_filter_block(self, block: FilterBlockClass, container: QWidget):
        """–£–¥–∞–ª—è–µ—Ç –±–ª–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        try:
            # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
            if block in self.blocks:
                self.blocks.remove(block)
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ UI
            self.blocks_container.layout().removeWidget(container)
            container.deleteLater()
            
            logger.info(f"–£–¥–∞–ª–µ–Ω –±–ª–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤, –æ—Å—Ç–∞–ª–æ—Å—å {len(self.blocks)}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
            self._apply_filters()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–ª–æ–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
    
    def _clear_all_filters(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤–æ –≤—Å–µ—Ö –±–ª–æ–∫–∞—Ö"""
        try:
            for block in self.blocks:
                block.reset_filters()
            
            logger.info("–í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –æ—á–∏—â–µ–Ω—ã")
            self._apply_filters()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
    
    def _apply_filters(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª"""
        try:
            filters = self.get_all_filters()
            self.filters_changed.emit(filters)
            logger.info(f"–ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã: {filters}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
    
    def get_all_filters(self) -> Dict[str, Dict[str, Any]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ –≤–∏–¥–µ {table_name: {col: value, ...}, ...}
        –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü –∏–∑ —Ä–∞–∑–Ω—ã—Ö –±–ª–æ–∫–æ–≤
        """
        result = defaultdict(dict)
        
        for block in self.blocks:
            table = block.get_selected_table()
            if table:
                filters = block.get_filters()
                if filters:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–ø—É—Å—Ç—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
                    result[table].update(filters)
        
        return dict(result)
    
    def set_filters(self, filters_dict: Dict[str, Dict[str, Any]]):
        """
        –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã
        filters_dict: {table_name: {column_name: value, ...}, ...}
        """
        try:
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –±–ª–æ–∫–∏ (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ)
            while len(self.blocks) > 1:
                last_block = self.blocks[-1]
                # –ù–∞–π–¥–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞ –∏ —É–¥–∞–ª–∏–º
                for i in range(self.blocks_container.layout().count()):
                    item = self.blocks_container.layout().itemAt(i)
                    if item and item.widget():
                        container = item.widget()
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞—à –±–ª–æ–∫
                        for j in range(container.layout().count() if hasattr(container, 'layout') else 0):
                            child_item = container.layout().itemAt(j)
                            if child_item and child_item.widget() == last_block:
                                self._remove_filter_block(last_block, container)
                                break
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            block_index = 0
            for table_name, table_filters in filters_dict.items():
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±–ª–æ–∫ –µ—Å–ª–∏ –Ω—É–∂–µ–Ω
                if block_index >= len(self.blocks):
                    self._add_filter_block()
                
                current_block = self.blocks[block_index]
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                current_block.table_combo.setCurrentText(table_name)
                current_block._on_table_changed(table_name)  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
                for col_name, value in table_filters.items():
                    current_block.set_filter_value(col_name, value)
                
                block_index += 1
            
            logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã: {filters_dict}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
    
    def get_active_tables(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü (—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏)"""
        return list(self.get_all_filters().keys())
    
    def has_active_filters(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã"""
        return bool(self.get_all_filters())
